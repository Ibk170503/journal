import { DataModel } from "@glazed/datamodel";
import { DIDDataStore } from "@glazed/did-datastore";
import type { NextPage } from "next";
import Head from "next/head";
import Router from "next/router";
import { useCallback, useContext, useEffect, useState } from "react";
import styled from "styled-components";
import ConnectModal from "../components/ConnectModal";
import PreviousJournal from "../components/PreviousJournal";
import { CeramicContext, CeramicContextValue } from "../context/ceramic";
import { aliases } from "../db/ceramic";

const SBody = styled.div`
  max-width: 65rem;
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  padding-top: 2.5rem;
  margin: 0 1rem;
`;

const SContainer = styled.div`
  display: flex;
  justify-content: center;
`;

const SAddText = styled.p`
  font-weight: 600;
  font-size: 1.2rem;
  color: white;
`;

const SImg = styled.img`
  transition: 200ms all;
  width: 1.1rem;
`;

const SAddJournal = styled.div`
  width: 16rem;
  height: 4rem;
  background: #d5dae0;
  border-radius: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  cursor: pointer;
  margin-bottom: 3rem;
  transition: 250ms border;

  :hover {
    ${SImg} {
      transform: scale(1.2);
    }
  }
`;

const SJournals = styled.p`
  font-weight: 500;
  font-size: 2rem;
  color: #565656;
  margin-bottom: 0.75rem;
`;

const SJournalBox = styled.div`
  height: 7.3rem;
  background: rgba(255, 255, 255, 0.5);
  border: 1px solid white;
  backdrop-filter: blur(2px);
  -webkit-backdrop-filter: blur(2px);
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 1.5rem 1rem;
  cursor: pointer;
  transition: 350ms ease-in-out;

  :hover {
    transform: scale(1.07);
  }
`;

const SJournalContainer = styled.div`
  display: grid;
  padding: 1rem;
  gap: 2.5rem;
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
  overflow-y: auto;
`;

const SJournalTitle = styled.p`
  font-weight: 600;
  font-size: 1.2rem;
`;

const SDate = styled.p`
  font-weight: 300;
  color: #5d5f62;
  font-size: 0.9rem;
  margin-right: 5px;
`;

const rawData = [
  {
    title: "Peaches",
    createdAt: Date.now(),
    cid: "bafkreigqou4xxnwt6r3nv4bcfbrafwbxfyr55a4d5k5ha7ir3oieinextu",
  },
  {
    title: "Awesome",
    createdAt: Date.now(),
    cid: "bafkreigqou4xxnwt6r3nv4bcfbrafwbxfyr55a4d5k5ha7ir3oieinextu",
  },
  {
    title: "Sad",
    createdAt: Date.now(),
    cid: "bafkreigqou4xxnwt6r3nv4bcfbrafwbxfyr55a4d5k5ha7ir3oieinextu",
  },
  {
    title: "Aching",
    createdAt: Date.now(),
    cid: "bafkreigqou4xxnwt6r3nv4bcfbrafwbxfyr55a4d5k5ha7ir3oieinextu",
  },
  {
    title: "Aching",
    createdAt: Date.now(),
    cid: "bafkreigqou4xxnwt6r3nv4bcfbrafwbxfyr55a4d5k5ha7ir3oieinextu",
  },
  {
    title: "Aching",
    createdAt: Date.now(),
    cid: "bafkreigqou4xxnwt6r3nv4bcfbrafwbxfyr55a4d5k5ha7ir3oieinextu",
  },
];

const Home: NextPage = () => {
  const [data, setData] =
    useState<{ title: string; cid: string; createdAt: number }[]>();

  const [openJournal, setOpenJournal] = useState(false);
  const [index, setIndex] = useState(0);

  const ceramicContext = useContext(CeramicContext) as CeramicContextValue;
  const ceramic = ceramicContext?.ceramic;

  useEffect(() => {
    if (ceramic) {
      (async () => {
        const model = new DataModel({ ceramic, aliases });
        const journalStore = new DIDDataStore({ ceramic, model });

        const doc = (await journalStore.get("journal")) as {
          data: { title: string; cid: string; createdAt: number }[];
        };
        const data = doc.data;
        setData(data);
      })();
    }
  }, [ceramic, aliases]);

  function openJournalModal(i: number) {
    setIndex(i);
    setOpenJournal(true);
  }

  if (!ceramicContext?.ceramic) {
    return <ConnectModal />;
  }

  if (openJournal) {
    return (
      <PreviousJournal journal={data![index]} setOpenJournal={setOpenJournal} />
    );
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SContainer>
        <SBody>
          <SAddJournal onClick={() => Router.push("/add-journal")}>
            <SImg src="/Add.svg" alt="" />
            <SAddText>Add Today's journal</SAddText>
          </SAddJournal>

          <SJournals>Your Journals</SJournals>
          <SJournalContainer>
            {data?.map(
              (
                journal: { title: string; cid: string; createdAt: number },
                i: number
              ) => {
                return (
                  <SJournalBox onClick={() => openJournalModal(i)} key={i}>
                    <SJournalTitle>{journal.title}</SJournalTitle>
                    <SDate>{journal.createdAt.toString()}</SDate>
                  </SJournalBox>
                );
              }
            )}
          </SJournalContainer>
        </SBody>
      </SContainer>
    </div>
  );
};

export default Home;
